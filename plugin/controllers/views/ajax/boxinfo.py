#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1364979192.74209
__CHEETAH_genTimestamp__ = 'Wed Apr  3 17:53:12 2013'
__CHEETAH_src__ = '/home/fermi/Work/Model/tmsingle/openpli3.0/build-tmsingle/tmp/work/mips32el-oe-linux/enigma2-plugin-extensions-openwebif-0.1+git1+279a2577c3bc6defebd4bf9e61a046dcf7f37c01-r0.72/git/plugin/controllers/views/ajax/boxinfo.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr  3 17:10:17 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class boxinfo(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(boxinfo, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<!-- box_info -->
<div id="content_main">
\t<div id="info">
\t\t<h3>Box Info</h3>
\t\t<hr />
\t\t<img src="images/boxes/''')
        _v = VFFSL(SL,"boximage",True) # u'${boximage}' on line 6, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${boximage}')) # from line 6, col 26.
        write(u'''" id="box_image" alt="box_info">
\t\t<hr />
\t\t<br/>
\t\t<table width="100%">
\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">Box</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Brand:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"brand",True) # u'$brand' on line 18, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$brand')) # from line 18, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Model:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"model",True) # u'$model' on line 22, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$model')) # from line 22, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Chipset:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"chipset",True) # u'$chipset' on line 26, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$chipset')) # from line 26, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Frontprocessor Version:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"str",False)(VFFSL(SL,"fp_version",True)) # u'$str($fp_version)' on line 30, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$str($fp_version)')) # from line 30, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Total Memory:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"mem1",True) # u'$mem1' on line 34, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$mem1')) # from line 34, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Free Memory:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"mem2",True) # u'$mem2' on line 38, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$mem2')) # from line 38, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Box Uptime:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"uptime",True) # u'$uptime' on line 42, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$uptime')) # from line 42, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">Software</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Kernel version:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"kernelver",True) # u'$kernelver' on line 55, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$kernelver')) # from line 55, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Firmware version:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"imagever",True) # u'$imagever' on line 59, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$imagever')) # from line 59, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Gui version:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"enigmaver",True) # u'$enigmaver' on line 63, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$enigmaver')) # from line 63, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">Tuners</th>
\t\t\t\t\t\t</tr>
''')
        for tuner in VFFSL(SL,"tuners",True): # generated from line 74, col 7
            write(u'''\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tuner.name",True) # u'$tuner.name' on line 76, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'$tuner.name')) # from line 76, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"tuner.type",True) # u'$tuner.type' on line 77, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$tuner.type')) # from line 77, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
''')
        write(u'''\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
''')
        for hd in VFFSL(SL,"hdd",True): # generated from line 83, col 4
            write(u'''\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">Hard disk model: ''')
            _v = VFFSL(SL,"hd.model",True) # u'$hd.model' on line 88, col 60
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.model')) # from line 88, col 60.
            write(u'''</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Capacity:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"hd.capacity",True) # u'$hd.capacity' on line 92, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.capacity')) # from line 92, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Free:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"hd.free",True) # u'$hd.free' on line 96, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.free')) # from line 96, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
''')
        for iface in VFFSL(SL,"ifaces",True): # generated from line 102, col 4
            write(u'''\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">Network interface: ''')
            _v = VFFSL(SL,"iface.name",True) # u'$iface.name' on line 107, col 62
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.name')) # from line 107, col 62.
            write(u'''</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">DHCP:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.dhcp",True) # u'$iface.dhcp' on line 111, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.dhcp')) # from line 111, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Ip address:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.ip",True) # u'$iface.ip' on line 115, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.ip')) # from line 115, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Subnet mask:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.mask",True) # u'$iface.mask' on line 119, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.mask')) # from line 119, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Gateway:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.gw",True) # u'$iface.gw' on line 123, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.gw')) # from line 123, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">Mac address:</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.mac",True) # u'$iface.mac' on line 127, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.mac')) # from line 127, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
''')
        write(u'''\t\t</table>
\t</div>
</div>\t
<!-- /box_info -->
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_boxinfo= 'respond'

## END CLASS DEFINITION

if not hasattr(boxinfo, '_initCheetahAttributes'):
    templateAPIClass = getattr(boxinfo, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(boxinfo)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=boxinfo()).run()


