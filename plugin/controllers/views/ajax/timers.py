#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from urllib import quote

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1364979193.307575
__CHEETAH_genTimestamp__ = 'Wed Apr  3 17:53:13 2013'
__CHEETAH_src__ = '/home/fermi/Work/Model/tmsingle/openpli3.0/build-tmsingle/tmp/work/mips32el-oe-linux/enigma2-plugin-extensions-openwebif-0.1+git1+279a2577c3bc6defebd4bf9e61a046dcf7f37c01-r0.72/git/plugin/controllers/views/ajax/timers.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr  3 17:10:17 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class timers(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(timers, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _orig_filter_18024312 = _filter
        filterName = u'WebSafe'
        if self._CHEETAH__filters.has_key("WebSafe"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        write(u'''<div id="content_main" style="min-height: 500px;">
\t<div id="info">
\t\t<h3>Timerlist</h3>

\t\t<div id="toolbar-header">
\t\t\t<span id="toolbar">
\t\t\t\t<span id="timerbuttons">
\t\t\t\t\t<button id="timerbutton0" onclick="addTimer(); return false">Add Timer</button>
\t\t\t\t\t<button id="timerbutton1" onclick="cleanupTimer(); return false">Cleanup Timers</button>
\t\t\t\t</span>
\t\t\t</span>
\t\t</div>

\t\t<div style="height: 640px; overflow: auto;">
''')
        for timer in VFFSL(SL,"timers",True): # generated from line 17, col 3
            write(u'''\t\t\t<div class="moviecontainer_main" id="''')
            _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 18, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 18, col 41.
            write(u'''-''')
            _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 18, col 54
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 18, col 54.
            write(u'''">
\t\t\t\t<div class="moviecontainer_left">
\t\t\t\t\t<div style="padding: 3px;">
\t\t\t\t\t\t<div style="color: #176093; font-weight: bold;">
\t\t\t\t\t\t\t''')
            _v = VFFSL(SL,"timer.name",True) # u'$timer.name' on line 22, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.name')) # from line 22, col 8.
            write(u'''
\t\t\t\t\t\t</div>
\t\t\t\t\t\t''')
            _v = VFFSL(SL,"timer.realbegin",True) # u'$timer.realbegin' on line 24, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.realbegin')) # from line 24, col 7.
            write(u''' - ''')
            _v = VFFSL(SL,"timer.realend",True) # u'$timer.realend' on line 24, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.realend')) # from line 24, col 26.
            write(u'''
''')
            if VFFSL(SL,"timer.repeated",True) != 0: # generated from line 25, col 7
                write(u'''\t\t\t\t\t\t\t<div>
\t\t\t\t\t\t\t\tEvery
''')
                flags = VFFSL(SL,"timer.repeated",True)
                timerDays = []
                for day in ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']: # generated from line 30, col 8
                    if VFFSL(SL,"flags",True)&1: # generated from line 31, col 9
                        write(u'''\t\t\t\t\t\t\t\t\t''')
                        _v = VFN(VFFSL(SL,"timerDays",True),"append",False)(VFFSL(SL,"day",True)) # u'$timerDays.append($day)' on line 32, col 10
                        if _v is not None: write(_filter(_v, rawExpr=u'$timerDays.append($day)')) # from line 32, col 10.
                        write(u'''
''')
                    flags = VFFSL(SL,"flags",True) >> 1
                _v = ', '.join(VFFSL(SL,"timerDays",True))
                if _v is not None: write(_filter(_v))
                write(u'''\t\t\t\t\t\t\t</div>
''')
            write(u'''\t\t\t\t\t\t<div style="font-weight: bold;">
\t\t\t\t\t\t\t''')
            _v = VFFSL(SL,"timer.servicename",True) # u'$timer.servicename' on line 40, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.servicename')) # from line 40, col 8.
            write(u'''
\t\t\t\t\t\t</div>
\t\t\t\t\t</div>
\t\t\t\t\t<div style="padding: 3px;">
\t\t\t\t\t\t''')
            _v = VFFSL(SL,"timer.description",True) # u'$timer.description' on line 44, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.description')) # from line 44, col 7.
            write(u'''
\t\t\t\t\t</div>
\t\t\t\t\t<div style="padding: 3px;">
\t\t\t\t\t\t<span style="color: #7F8181; font-weight: bold;">
''')
            if VFFSL(SL,"timer.state",True) == 0: # generated from line 48, col 8
                write(u'''\t\t\t\t\t\t\t\twaiting
''')
            elif VFFSL(SL,"timer.state",True) == 2: # generated from line 50, col 8
                write(u'''\t\t\t\t\t\t\t\trunning
''')
            elif VFFSL(SL,"timer.state",True) == 3: # generated from line 52, col 8
                write(u'''\t\t\t\t\t\t\t\tfinished
''')
            write(u'''\t\t\t\t\t\t</span>
\t\t\t\t\t</div>
\t\t\t\t</div>
\t\t\t\t<div class="moviecontainer_right">
\t\t\t\t\t<div style="padding: 3px; text-align: right;">
\t\t\t\t\t\t<a href=\'#\' onClick="editTimer(\'''')
            _v = VFFSL(SL,"timer.serviceref",True) # u'$timer.serviceref' on line 60, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.serviceref')) # from line 60, col 39.
            write(u"""', '""")
            _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 60, col 60
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 60, col 60.
            write(u"""', '""")
            _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 60, col 76
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 60, col 76.
            write(u'''\');"><img src="../images/ico_edit.png" title="Edit Timer" border="0"></a>
\t\t\t\t\t\t<a href=\'#\' onClick="deleteTimer(\'''')
            _v = VFFSL(SL,"timer.serviceref",True) # u'$timer.serviceref' on line 61, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.serviceref')) # from line 61, col 41.
            write(u"""', '""")
            _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 61, col 62
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 61, col 62.
            write(u"""', '""")
            _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 61, col 78
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 61, col 78.
            write(u'''\');"><img src="../images/ico_delete.png" title="Delete Timer" border="0"></a>
\t\t\t\t\t\t<a href=\'#\' onClick="toggleTimerStatus(\'''')
            _v = VFFSL(SL,"timer.serviceref",True) # u'$timer.serviceref' on line 62, col 47
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.serviceref')) # from line 62, col 47.
            write(u"""', '""")
            _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 62, col 68
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 62, col 68.
            write(u"""', '""")
            _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 62, col 84
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 62, col 84.
            write(u'''\');">
''')
            if VFFSL(SL,"timer.disabled",True): # generated from line 63, col 7
                write(u'''\t\t\t\t\t\t<img id="img-''')
                _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 64, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 64, col 20.
                write(u'''-''')
                _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 64, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 64, col 33.
                write(u'''" src="../images/ico_disabled.png" title="Enable Timer" border="0">
''')
            else: # generated from line 65, col 7
                write(u'''\t\t\t\t\t\t<img id="img-''')
                _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 66, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 66, col 20.
                write(u'''-''')
                _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 66, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 66, col 33.
                write(u'''" src="../images/ico_enabled.png" title="Disable Timer" border="0">
''')
            write(u'''\t\t\t\t\t\t</a>
\t\t\t\t\t</div>
\t\t\t\t</div>
\t\t\t\t<div style="clear: both;"></div>
\t\t\t</div>
''')
        write(u'''\t\t</div>
\t</div>
</div>

<div id="editTimerForm"></div>

<script>
\t$(\'#timerbuttons\').buttonset();
    var reloadTimers = true;

    $(\'#editTimerForm\').load(\'/ajax/edittimer\');
</script>
''')
        _filter = self._CHEETAH__currentFilter = _orig_filter_18024312
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_timers= 'respond'

## END CLASS DEFINITION

if not hasattr(timers, '_initCheetahAttributes'):
    templateAPIClass = getattr(timers, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(timers)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=timers()).run()


